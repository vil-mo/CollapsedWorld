[gd_scene load_steps=8 format=3 uid="uid://3rcw27jrqgpb"]

[ext_resource type="PackedScene" path="res://enviroment/interactable_objects/interactable_area.tscn" id="1_mpctl"]
[ext_resource type="Script" path="res://enviroment/interactable_objects/grounded_item/grounded_item.gd" id="2_g0nvr"]

[sub_resource type="Shader" id="1"]
code = "shader_type canvas_item;

uniform vec4 outline_color : source_color = vec4(1.0);
uniform float outline_width : hint_range(0, 10) = 0;
uniform int outline_pattern : hint_range(0, 2) = 2; // diamond, circle, square
uniform bool outline_inside = false;
uniform bool outline_add_margins = true; // only useful when inside is false


void vertex() {
	if (outline_add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * outline_width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(outline_width); i <= ceil(outline_width); i++) {
		float x = abs(i) > outline_width ? outline_width * sign(i) : i;
		float offset;
		
		if (outline_pattern == 0) {
			offset = outline_width - abs(x);
		} else if (outline_pattern == 1) {
			offset = floor(sqrt(pow(outline_width + 0.5, 2) - x * x));
		} else if (outline_pattern == 2) {
			offset = outline_width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == outline_inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (outline_add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(outline_width * 2.0));
		
		uv = (uv - texture_pixel_size * outline_width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == outline_inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = outline_inside ? mix(COLOR.rgb, outline_color.rgb, outline_color.a) : outline_color.rgb;
		COLOR.a += (1.0 - COLOR.a) * outline_color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="2"]
resource_local_to_scene = true
shader = SubResource("1")
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/outline_width = 0.0
shader_parameter/outline_pattern = 2
shader_parameter/outline_inside = false
shader_parameter/outline_add_margins = true

[sub_resource type="Animation" id="3"]
resource_name = "Appearance"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(2, 0.5, 2, 1),
"update": 0,
"values": [Vector2(0, -6), Vector2(0, 0), Vector2(0, -2), Vector2(0, 0)]
}

[sub_resource type="Animation" id="4"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, -6)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_a0tit"]
_data = {
"Appearance": SubResource("3"),
"RESET": SubResource("4")
}

[node name="GroundedItem" instance=ExtResource("1_mpctl")]
z_index = -5
script = ExtResource("2_g0nvr")
item_key_string = "shadow_sword"

[node name="CollisionShape2D" parent="." index="0"]
visible = false

[node name="Sprite2D" parent="Visuals" index="0"]
material = SubResource("2")
position = Vector2(0, -6)

[node name="AnimationPlayer" type="AnimationPlayer" parent="Visuals" index="1"]
autoplay = "Appearance"
libraries = {
"": SubResource("AnimationLibrary_a0tit")
}
